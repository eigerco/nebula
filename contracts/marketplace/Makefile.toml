[env]
friendbot = "https://friendbot-futurenet.stellar.org/"
network = "futurenet"
server = "https://horizon-futurenet.stellar.org/"

[env.futurenet]
friendbot = "https://friendbot-futurenet.stellar.org/"
network = "futurenet"
server = "https://horizon-futurenet.stellar.org/"

[env.standalone]
friendbot = "http://localhost:8000/friendbot"
network = "standalone"
server = "http://localhost:8000"

[tasks.run_standalone_server]
script = '''
  docker run --rm -it \
    -p 8000:8000 \
    --name stellar \
    stellar/quickstart:soroban-dev@sha256:a6b03cf6b0433c99f2f799b719f0faadbb79684b1b763e7674ba749fb0f648ee \
    --standalone \
    --enable-soroban-rpc
'''

[tasks.create_account_admin]
script_runner = "@shell"
script = '''
  soroban config identity generate admin
  curl "${friendbot}?addr=$(soroban config identity address admin)"
'''

# trader_1 is the seller
# trader_2 and trader_3 are buyers
[tasks.create_traders]
script = '''
  for TRADER in 1 2 3
  do
    soroban config identity generate trader_$TRADER
    curl "${friendbot}?addr=$(soroban config identity address trader_$TRADER)"
  done
'''

[tasks.accounts]
dependencies = ["create_account_admin", "create_traders"]

[tasks.get_token]
script = '''
soroban lab token id --asset native --network ${network} > /tmp/token_id.txt
'''

[tasks.get_asset]
script = '''
soroban lab token id --asset native --network ${network} > /tmp/asset_id.txt
'''

[tasks.deploy]
script = '''
  soroban contract deploy \
  --source admin \
  --wasm ../../target/wasm32-unknown-unknown/release/marketplace.wasm \
  --network ${network} > /tmp/contract_id.txt
'''

[tasks.invoke_init]
script = '''
  soroban contract invoke \
  --id $(cat /tmp/contract_id.txt) \
  --source admin \
  --network ${network} \
  -- \
  init \
  --token $(cat /tmp/token_id.txt) \
  --admin $(soroban config identity address admin) \
  --percentage 1 \
'''


[tasks.invoke_create_listing]
script = '''
    soroban contract invoke \
    --id $(cat /tmp/contract_id.txt) \
    --source trader_1 \
    --network ${network} \
    -- \
    create_listing \
    --seller $(soroban config identity address trader_1) \
    --asset $(cat /tmp/asset_id.txt) \
    --price 100 \
'''

[tasks.invoke_get_listing]
script = '''
  soroban contract invoke \
  --id $(cat /tmp/contract_id.txt) \
  --source trader_2 \
  --network ${network} \
  -- \
  get_listing \
  --asset $(cat /tmp/asset_id.txt) \
'''

[tasks.invoke_buy_listing]
script = '''
  soroban contract invoke \
  --id $(cat /tmp/contract_id.txt) \
  --source trader_2 \
  --network ${network} \
  -- \
  buy_listing \
  --buyer $(soroban config identity address trader_2) \
  --asset $(cat /tmp/asset_id.txt) \
  --price 100 \
'''

[tasks.invoke_update_price]
script = '''
  soroban contract invoke \
  --id $(cat /tmp/contract_id.txt) \
  --source trader_2 \
  --network ${network} \
  -- \
  update_price \
  --seller $(soroban config identity address trader_2) \
  --asset $(cat /tmp/asset_id.txt) \
  --old_price 100 \
  --new_price 150 \
'''

[tasks.invoke_pause_listing]
script = '''
  soroban contract invoke \
  --id $(cat /tmp/contract_id.txt) \
  --source trader_2 \
  --network ${network} \
  -- \
  pause_listing \
  --seller $(soroban config identity address trader_2) \
  --asset $(cat /tmp/asset_id.txt) \
  --price 150
'''

[tasks.invoke_remove_listing]
script = '''
  soroban contract invoke \
  --id $(cat /tmp/contract_id.txt) \
  --source trader_2 \
  --network ${network} \
  -- \
  remove_listing \
  --seller $(soroban config identity address trader_2) \
  --asset $(cat /tmp/asset_id.txt) \
  --price 150
'''


[tasks.invoke_contract]
dependencies = [
  "invoke_init",
  "invoke_create_listing",
  "invoke_get_listing",
  "invoke_buy_listing",
  "invoke_update_price",
  "invoke_pause_listing",
  "invoke_remove_listing",
]

# currently this only displays balance of each player, without checking who has the most
[tasks.get_balances]
script = '''
for TRADER in 1 2 3
  do
    soroban contract invoke \
    --id $(cat /tmp/token_id.txt) \
    --network ${network} \
    -- \
    balance \
    --id $(soroban config identity address trader_$TRADER)
  done
'''

[tasks.get_transactions]
script = '''
curl "${server}accounts/$(soroban config identity address trader_2)/transactions" > /tmp/transactions.txt
'''

[tasks.get_admin_transactions]
script = '''
curl "${server}accounts/$(soroban config identity address admin)/transactions" > /tmp/admin_transactions.txt
'''

[tasks.calculate_fees]
script_runner = "node"
script_extension = "js"
script = '''
let fs = require('fs')

function calculateFees(file) {
  let fee = 0
  const transactions = fs.readFileSync(file, 'utf8')

  const obj = JSON.parse(transactions)
  const recordsSize = obj['_embedded']['records'].length
  for (let i = 1; i < recordsSize; ++i) {
    const tx = obj['_embedded']['records'][i]
    fee += parseInt(tx.fee_charged)
  }
  return fee
}

let fee = calculateFees('/tmp/transactions.txt')
console.log('Traders fees: ', fee)

let adminFee = calculateFees('/tmp/admin_transactions.txt')
console.log('Admin fees: ', adminFee)

console.log('Total fees: ', (fee + adminFee))
'''

[tasks.run_test]
dependencies = [
  "accounts",
  "get_token",
  "get_asset",
  "deploy",
  "invoke_contract",
  "get_balances",
  "get_transactions",
  "get_admin_transactions",
  "calculate_fees",
]
